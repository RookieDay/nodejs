<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Anatomy of an HTTP Transaction | Node.js</title>

    <link rel="dns-prefetch" href="http://fonts.googleapis.com">
    <link rel="dns-prefetch" href="http://fonts.gstatic.com">
    <link rel="dns-prefetch" href="http://www.google-analytics.com">

    <meta name="author" content="Node.js Foundation">
    <meta name="robots" content="index, follow">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="apple-touch-icon" href="/static/apple-touch-icon.png">
    <link rel="icon" sizes="32x32" type="image/png" href="/static/favicon.png">

    <link rel="canonical" href="https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/">
        <link rel="alternate" href="/en/feed/blog.xml" title="Node.js Blog" type="application/rss+xml">
        <link rel="alternate" href="/en/feed/releases.xml" title="Node.js Blog: Releases" type="application/rss+xml">
        <link rel="alternate" href="/en/feed/vulnerability.xml" title="Node.js Blog: Vulnerability Reports" type="application/rss+xml">
        <link rel="alternate" href="/en/feed/tsc-minutes.xml" title="Node.js TSC meeting minutes" type="application/rss+xml">
    <link rel="stylesheet" href="/en/styles.css" media="all">
    <link rel="stylesheet" href="../../../../../fonts.googleapis.com/css-family=Source+Sans+Pro-400,600.css" tppabs="https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,600">
    <script>
        document.querySelector('html').className += " has-js";

        !function(n,o,d,e,j,s){n.GoogleAnalyticsObject=d;n[d]||(n[d]=function(){
        (n[d].q=n[d].q||[]).push(arguments)});n[d].l=+new Date;j=o.createElement(e);
        s=o.getElementsByTagName(e)[0];j.async=1;j.src='../../../../../www.google-analytics.com/analytics-1.js'/*tpa=http://www.google-analytics.com/analytics.js*/;
        s.parentNode.insertBefore(j,s)}(window,document,'ga','script');

        ga('create', 'UA-67020396-1', 'auto');
        ga('send', 'pageview');
    </script>
</head>

<body>
    <header>
        <div class="container">
    
            <a href="/en" id="logo">
              <img src="/static/images/logos/nodejs-new-white-pantone.png" alt="node.js">
            </a>
    
            <nav>
                <ul class="list-divider-pipe">
                    <li>
                        <a href="/en/">Home</a>
                    </li>
                        <li>
                            <a href="/en/about/">About</a>
                        </li>
                        <li>
                            <a href="/en/download/">Downloads</a>
                        </li>
                        <li class="active">
                            <a href="/en/docs/">Docs</a>
                        </li>
                        <li>
                            <a href="/en/foundation/">Foundation</a>
                        </li>
                        <li>
                            <a href="/en/get-involved/">Get Involved</a>
                        </li>
                        <li>
                            <a href="/en/security/">Security</a>
                        </li>
                        <li>
                            <a href="/en/blog/">News</a>
                        </li>
                </ul>
            </nav>
    
        </div>
    </header>

    <div id="main">
        <div class="container has-side-nav">

            <aside>
                <ul>
                                <li>
                                            <a href="/en/docs/">Docs</a>
                                </li>
                                <li>
                                            <a href="/en/docs/es6/">ES6 in Node.js</a>
                                </li>
                                <li>
                                            <a href="/en/docs/faq/">FAQ</a>
                                </li>
                                <li>
                                        <a href="/dist/latest-v4.x/docs/api">v4.4.2 API <span class="small color-lightgray">LTS</span></a>
                                </li>
                                <li>
                                        <a href="/dist/latest-v5.x/docs/api">v5.10.1 API</a>
                                </li>
                                <li>
                                            <a href="/en/docs/guides/">Guides</a>
                                </li>
                </ul>
            </aside>

            <article>
                <a class="edit-link" href="javascript:if(confirm(%27https://github.com/nodejs/nodejs.org/edit/master/locale/en/docs/guides/anatomy-of-an-http-transaction.md  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://github.com/nodejs/nodejs.org/edit/master/locale/en/docs/guides/anatomy-of-an-http-transaction.md%27" tppabs="https://github.com/nodejs/nodejs.org/edit/master/locale/en/docs/guides/anatomy-of-an-http-transaction.md">Edit on GitHub</a> <h1>Anatomy of an HTTP Transaction<a name="anatomy-of-an-http-transaction" class="anchor" href="#anatomy-of-an-http-transaction"></a></h1><p>The purpose of this guide is to impart a solid understanding of the process of
Node.js HTTP handling. We&apos;ll assume that you know, in a general sense, how HTTP
requests work, regardless of language or programming environment. We&apos;ll also
assume a bit of familiarity with Node.js <a href="javascript:if(confirm(%27https://nodejs.org/api/events.html  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/events.html%27" tppabs="https://nodejs.org/api/events.html"><code>EventEmitters</code></a> and <a href="javascript:if(confirm(%27https://nodejs.org/api/stream.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/stream.html%27" tppabs="https://nodejs.org/api/stream.html"><code>Streams</code></a>.
If you&apos;re not quite familiar with them, it&apos;s worth taking a quick read through
the API docs for each of those.</p>
<h2>Create the Server<a name="create-the-server" class="anchor" href="#create-the-server"></a></h2><p>Any node web server application will at some point have to create a web server
object. This is done by using <a href="javascript:if(confirm(%27https://nodejs.org/api/http.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/http.html#http_http_createserver_requestlistener%27" tppabs="https://nodejs.org/api/http.html#http_http_createserver_requestlistener"><code>createServer</code></a>.</p>
<pre><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&apos;http&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// magic happens here!</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>The function that&apos;s passed in to <a href="javascript:if(confirm(%27https://nodejs.org/api/http.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/http.html#http_http_createserver_requestlistener%27" tppabs="https://nodejs.org/api/http.html#http_http_createserver_requestlistener"><code>createServer</code></a> is called once for every
HTTP request that&apos;s made against that server, so it&apos;s called the request
handler. In fact, the <a href="javascript:if(confirm(%27https://nodejs.org/api/http.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/http.html#http_class_http_server%27" tppabs="https://nodejs.org/api/http.html#http_class_http_server"><code>Server</code></a> object returned by <a href="javascript:if(confirm(%27https://nodejs.org/api/http.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/http.html#http_http_createserver_requestlistener%27" tppabs="https://nodejs.org/api/http.html#http_http_createserver_requestlistener"><code>createServer</code></a> is an
<a href="javascript:if(confirm(%27https://nodejs.org/api/events.html  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/events.html#events_class_eventemitter%27" tppabs="https://nodejs.org/api/events.html#events_class_eventemitter"><code>EventEmitter</code></a>, and what we have here is just shorthand for creating a
<code>server</code> object and then adding the listener later.</p>
<pre><code class="language-javascript"><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&apos;request&apos;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// the same kind of magic happens here!</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>When an HTTP request hits the server, node calls the request handler function
with a few handy objects for dealing with the transaction, <code>request</code> and
<code>response</code>. We&apos;ll get to those shortly.</p>
<p>In order to actually serve requests, the <a href="javascript:if(confirm(%27https://nodejs.org/api/http.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback%27" tppabs="https://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback"><code>listen</code></a> method needs to be called
on the <code>server</code> object. In most cases, all you&apos;ll need to pass to <code>listen</code> is
the port number you want the server to listen on. There are some other options
too, so consult the <a href="javascript:if(confirm(%27https://nodejs.org/api/http.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/http.html%27" tppabs="https://nodejs.org/api/http.html">API reference</a>.</p>
<h2>Method, URL and Headers<a name="method-url-and-headers" class="anchor" href="#method-url-and-headers"></a></h2><p>When handling a request, the first thing you&apos;ll probably want to do is look at
the method and URL, so that appropriate actions can be taken. Node makes this
relatively painless by putting handy properties onto the <code>request</code> object.</p>
<pre><code class="language-javascript"><span class="token keyword">var</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span>method<span class="token punctuation">;</span>
<span class="token keyword">var</span> url <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p><strong>Note:</strong> The <code>request</code> object is an instance of <a href="javascript:if(confirm(%27https://nodejs.org/api/http.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/http.html#http_class_http_incomingmessage%27" tppabs="https://nodejs.org/api/http.html#http_class_http_incomingmessage"><code>IncomingMessage</code></a>.</p>
</blockquote>
<p>The <code>method</code> here will always be a normal HTTP method/verb. The <code>url</code> is the
full URL without the server, protocol or port. For a typical URL, this means
everything after and including the third forward slash.</p>
<p>Headers are also not far away. They&apos;re in their own object on <code>request</code> called
<code>headers</code>.</p>
<pre><code class="language-javascript"><span class="token keyword">var</span> headers <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>
<span class="token keyword">var</span> userAgent <span class="token operator">=</span> headers<span class="token punctuation">[</span><span class="token string">&apos;user-agent&apos;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<p>It&apos;s important to note here that all headers are represented in lower-case only,
regardless of how the client actually sent them. This simplifies the task of
parsing headers for whatever purpose.</p>
<p>If some headers are repeated, then their values are overwritten or joined
together as comma-separated strings, depending on the header. In some cases,
this can be problematic, so <a href="javascript:if(confirm(%27https://nodejs.org/api/http.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/http.html#http_message_rawheaders%27" tppabs="https://nodejs.org/api/http.html#http_message_rawheaders"><code>rawHeaders</code></a> is also available.</p>
<h2>Request Body<a name="request-body" class="anchor" href="#request-body"></a></h2><p>When receiving a <code>POST</code> or <code>PUT</code> request, the request body might be important to
your application. Getting at the body data is a little more involved than
accessing request headers. The <code>request</code> object that&apos;s passed in to a handler
implements the <a href="javascript:if(confirm(%27https://nodejs.org/api/stream.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/stream.html#stream_class_stream_readable%27" tppabs="https://nodejs.org/api/stream.html#stream_class_stream_readable"><code>ReadableStream</code></a> interface. This stream can be listened to or
piped elsewhere just like any other stream. We can grab the data right out of
the stream by listening to the stream&apos;s <code>&apos;data&apos;</code> and <code>&apos;end&apos;</code> events.</p>
<p>The chunk emitted in each <code>&apos;data&apos;</code> event is a <a href="javascript:if(confirm(%27https://nodejs.org/api/buffer.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/buffer.html%27" tppabs="https://nodejs.org/api/buffer.html"><code>Buffer</code></a>. If you know it&apos;s
going to be string data, the best thing to do is collect the data in an array,
then at the <code>&apos;end&apos;</code>, concatenate and stringify it.</p>
<pre><code class="language-javascript"><span class="token keyword">var</span> body <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&apos;data&apos;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  body<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&apos;end&apos;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  body <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// at this point, `body` has the entire request body stored in it as a string</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p><strong>Note:</strong> This may seem a tad tedious, and in many cases, it is. Luckily,
there are modules like <a href="javascript:if(confirm(%27https://www.npmjs.com/package/concat-stream  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://www.npmjs.com/package/concat-stream%27" tppabs="https://www.npmjs.com/package/concat-stream"><code>concat-stream</code></a> and <a href="javascript:if(confirm(%27https://www.npmjs.com/package/body  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://www.npmjs.com/package/body%27" tppabs="https://www.npmjs.com/package/body"><code>body</code></a> on <a href="javascript:if(confirm(%27https://www.npmjs.com/  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27https://www.npmjs.com/%27" tppabs="https://www.npmjs.com/"><code>npm</code></a> which can
help hide away some of this logic. It&apos;s important to have a good understanding
of what&apos;s going on before going down that road, and that&apos;s why you&apos;re here!</p>
</blockquote>
<h2>A Quick Thing About Errors<a name="a-quick-thing-about-errors" class="anchor" href="#a-quick-thing-about-errors"></a></h2><p>Since the <code>request</code> object is a <a href="javascript:if(confirm(%27https://nodejs.org/api/stream.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/stream.html#stream_class_stream_readable%27" tppabs="https://nodejs.org/api/stream.html#stream_class_stream_readable"><code>ReadableStream</code></a>, it&apos;s also an
<a href="javascript:if(confirm(%27https://nodejs.org/api/events.html  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/events.html#events_class_eventemitter%27" tppabs="https://nodejs.org/api/events.html#events_class_eventemitter"><code>EventEmitter</code></a> and behaves like one when an error happens.</p>
<p>An error in the <code>request</code> stream presents itself by emitting an <code>&apos;error&apos;</code> event
on the stream. <strong>If you don&apos;t have a listener for that event, the error will be
<em>thrown</em>, which could crash your Node.js program.</strong> You should therefore add an
<code>&apos;error&apos;</code> listener on your request streams, even if you just log it and
continue on your way. (Though it&apos;s probably best to send some kind of HTTP error
response. More on that later.)</p>
<pre><code class="language-javascript">request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&apos;error&apos;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// This prints the error message and stack trace to `stderr`.</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>There are other ways of <a href="javascript:if(confirm(%27https://nodejs.org/api/errors.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/errors.html%27" tppabs="https://nodejs.org/api/errors.html">handling these errors</a> such as
other abstractions and tools, but always be aware that errors can and do happen,
and you&apos;re going to have to deal with them.</p>
<h2>What We&apos;ve Got so Far<a name="what-we-ve-got-so-far" class="anchor" href="#what-we-ve-got-so-far"></a></h2><p>At this point, we&apos;ve covered creating a server, and grabbing the method, URL,
headers and body out of requests. When we put that all together, it might look
something like this:</p>
<pre><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&apos;http&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> headers <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>
  <span class="token keyword">var</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span>method<span class="token punctuation">;</span>
  <span class="token keyword">var</span> url <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">;</span>
  <span class="token keyword">var</span> body <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&apos;error&apos;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&apos;data&apos;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    body<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&apos;end&apos;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    body <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// At this point, we have the headers, method, url and body, and can now</span>
    <span class="token comment" spellcheck="true">// do whatever we need to in order to respond to this request.</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Activates this server, listening on port 8080.</span>
</code></pre>
<p>If we run this example, we&apos;ll be able to <em>receive</em> requests, but not <em>respond</em>
to them. In fact, if you hit this example in a web browser, your request would
time out, as nothing is being sent back to the client.</p>
<p>So far we haven&apos;t touched on the <code>response</code> object at all, which is an instance
of <a href="javascript:if(confirm(%27https://nodejs.org/api/http.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/http.html#http_class_http_serverresponse%27" tppabs="https://nodejs.org/api/http.html#http_class_http_serverresponse"><code>ServerResponse</code></a>, which is a <a href="javascript:if(confirm(%27https://nodejs.org/api/stream.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/stream.html#stream_class_stream_writable%27" tppabs="https://nodejs.org/api/stream.html#stream_class_stream_writable"><code>WritableStream</code></a>. It contains many
useful methods for sending data back to the client. We&apos;ll cover that next.</p>
<h2>HTTP Status Code<a name="http-status-code" class="anchor" href="#http-status-code"></a></h2><p>If you don&apos;t bother setting it, the HTTP status code on a response will always
be 200. Of course, not every HTTP response warrants this, and at some point
you&apos;ll definitely want to send a different status code. To do that, you can set
the <code>statusCode</code> property.</p>
<pre><code class="language-javascript">response<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Tell the client that the resource wasn&apos;t found.</span>
</code></pre>
<p>There are some other shortcuts to this, as we&apos;ll see soon.</p>
<h2>Setting Response Headers<a name="setting-response-headers" class="anchor" href="#setting-response-headers"></a></h2><p>Headers are set through a convenient method called <a href="javascript:if(confirm(%27https://nodejs.org/api/http.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/http.html#http_response_setheader_name_value%27" tppabs="https://nodejs.org/api/http.html#http_response_setheader_name_value"><code>setHeader</code></a>.</p>
<pre><code class="language-javascript">response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&apos;Content-Type&apos;</span><span class="token punctuation">,</span> <span class="token string">&apos;application/json&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&apos;X-Powered-By&apos;</span><span class="token punctuation">,</span> <span class="token string">&apos;bacon&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>When setting the headers on a response, the case is insensitive on their names.
If you set a header repeatedly, the last value you set is the value that gets
sent.</p>
<h2>Explicitly Sending Header Data<a name="explicitly-sending-header-data" class="anchor" href="#explicitly-sending-header-data"></a></h2><p>The methods of setting the headers and status code that we&apos;ve already discussed
assume that you&apos;re using &quot;implicit headers&quot;. This means you&apos;re counting on node
to send the headers for you at the correct time before you start sending body
data.</p>
<p>If you want, you can <em>explicitly</em> write the headers to the response stream.
To do this, there&apos;s a method called <a href="javascript:if(confirm(%27https://nodejs.org/api/http.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/http.html#http_response_writehead_statuscode_statusmessage_headers%27" tppabs="https://nodejs.org/api/http.html#http_response_writehead_statuscode_statusmessage_headers"><code>writeHead</code></a>, which writes the status
code and the headers to the stream.</p>
<pre><code class="language-javascript">response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token string">&apos;Content-Type&apos;</span><span class="token punctuation">:</span> <span class="token string">&apos;application/json&apos;</span><span class="token punctuation">,</span>
  <span class="token string">&apos;X-Powered-By&apos;</span><span class="token punctuation">:</span> <span class="token string">&apos;bacon&apos;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Once you&apos;ve set the headers (either implicitly or explicitly), you&apos;re ready to
start sending response data.</p>
<h2>Sending Response Body<a name="sending-response-body" class="anchor" href="#sending-response-body"></a></h2><p>Since the <code>response</code> object is a <a href="javascript:if(confirm(%27https://nodejs.org/api/stream.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/stream.html#stream_class_stream_writable%27" tppabs="https://nodejs.org/api/stream.html#stream_class_stream_writable"><code>WritableStream</code></a>, writing a response body
out to the client is just a matter of using the usual stream methods.</p>
<pre><code class="language-javascript">response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&apos;&lt;html&gt;&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&apos;&lt;body&gt;&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&apos;&lt;h1&gt;Hello, World!&lt;/h1&gt;&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&apos;&lt;/body&gt;&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&apos;&lt;/html&gt;&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>The <code>end</code> function on streams can also take in some optional data to send as the
last bit of data on the stream, so we can simplify the example above as follows.</p>
<pre><code class="language-javascript">response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&apos;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, World!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p><strong>Note:</strong> It&apos;s important to set the status and headers <em>before</em> you start
writing chunks of data to the body. This makes sense, since headers come before
the body in HTTP responses.</p>
</blockquote>
<h2>Another Quick Thing About Errors<a name="another-quick-thing-about-errors" class="anchor" href="#another-quick-thing-about-errors"></a></h2><p>The <code>response</code> stream can also emit <code>&apos;error&apos;</code> events, and at some point you&apos;re
going to have to deal with that as well. All of the advice for <code>request</code> stream
errors still applies here.</p>
<h2>Put It All Together<a name="put-it-all-together" class="anchor" href="#put-it-all-together"></a></h2><p>Now that we&apos;ve learned about making HTTP responses, let&apos;s put it all together.
Building on the earlier example, we&apos;re going to make a server that sends back
all of the data that was sent to us by the user. We&apos;ll format that data as JSON
using <code>JSON.stringify</code>.</p>
<pre><code class="language-javascript">
<span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&apos;http&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> headers <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>
  <span class="token keyword">var</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span>method<span class="token punctuation">;</span>
  <span class="token keyword">var</span> url <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">;</span>
  <span class="token keyword">var</span> body <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&apos;error&apos;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&apos;data&apos;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    body<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&apos;end&apos;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    body <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// BEGINNING OF NEW STUFF</span>

    response<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&apos;error&apos;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    response<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&apos;Content-Type&apos;</span><span class="token punctuation">,</span> <span class="token string">&apos;application/json&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// Note: the 2 lines above could be replaced with this next one:</span>
    <span class="token comment" spellcheck="true">// response.writeHead(200, {&apos;Content-Type&apos;: &apos;application/json&apos;})</span>

    <span class="token keyword">var</span> responseBody <span class="token operator">=</span> <span class="token punctuation">{</span>
      headers<span class="token punctuation">:</span> headers<span class="token punctuation">,</span>
      method<span class="token punctuation">:</span> method<span class="token punctuation">,</span>
      url<span class="token punctuation">:</span> url<span class="token punctuation">,</span>
      body<span class="token punctuation">:</span> body
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// Note: the 2 lines above could be replaced with this next one:</span>
    <span class="token comment" spellcheck="true">// response.end(JSON.stringify(responseBody))</span>

    <span class="token comment" spellcheck="true">// END OF NEW STUFF</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2>Echo Server Example<a name="echo-server-example" class="anchor" href="#echo-server-example"></a></h2><p>Let&apos;s simplify the previous example to make a simple echo server, which just
sends whatever data is received in the request right back in the response. All
we need to do is grab the data from the request stream and write that data to
the response stream, similar to what we did previously.</p>
<pre><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&apos;http&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> body <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&apos;data&apos;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    body<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&apos;end&apos;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    body <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Now let&apos;s tweak this. We want to only send an echo under the following
conditions:</p>
<ul>
<li>The request method is GET.</li>
<li>The URL is <code>/echo</code>.</li>
</ul>
<p>In any other case, we want to simply respond with a 404.</p>
<pre><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&apos;http&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">&apos;GET&apos;</span> <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">&apos;/echo&apos;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> body <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&apos;data&apos;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      body<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&apos;end&apos;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      body <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    response<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p><strong>Note:</strong> By checking the URL in this way, we&apos;re doing a form of &quot;routing&quot;.
Other forms of routing can be as simple as <code>switch</code> statements or as complex as
whole frameworks like <a href="javascript:if(confirm(%27https://www.npmjs.com/package/express  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://www.npmjs.com/package/express%27" tppabs="https://www.npmjs.com/package/express"><code>express</code></a>. If you&apos;re looking for something that does
routing and nothing else, try <a href="javascript:if(confirm(%27https://www.npmjs.com/package/router  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://www.npmjs.com/package/router%27" tppabs="https://www.npmjs.com/package/router"><code>router</code></a>.</p>
</blockquote>
<p>Great! Now let&apos;s take a stab at simplifying this. Remember, the <code>request</code> object
is a <a href="javascript:if(confirm(%27https://nodejs.org/api/stream.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/stream.html#stream_class_stream_readable%27" tppabs="https://nodejs.org/api/stream.html#stream_class_stream_readable"><code>ReadableStream</code></a> and the <code>response</code> object is a <a href="javascript:if(confirm(%27https://nodejs.org/api/stream.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/stream.html#stream_class_stream_writable%27" tppabs="https://nodejs.org/api/stream.html#stream_class_stream_writable"><code>WritableStream</code></a>.
That means we can use <a href="javascript:if(confirm(%27https://nodejs.org/api/stream.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options%27" tppabs="https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options"><code>pipe</code></a> to direct data from one to the other. That&apos;s
exactly what we want for an echo server!</p>
<pre><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&apos;http&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">&apos;GET&apos;</span> <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">&apos;/echo&apos;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    request<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    response<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Yay streams!</p>
<p>We&apos;re not quite done yet though. As mentioned multiple times in this guide,
errors can and do happen, and we need to deal with them.</p>
<p>To handle errors on the request stream, we&apos;ll log the error to <code>stderr</code> and send
a 400 status code to indicate a <code>Bad Request</code>. In a real-world application,
though, we&apos;d want to inspect the error to figure out what the correct status code
and message would be. As usual with errors, you should consult the
<a href="javascript:if(confirm(%27https://nodejs.org/api/errors.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/errors.html%27" tppabs="https://nodejs.org/api/errors.html"><code>Error</code> documentation</a>.</p>
<p>On the response, we&apos;ll just log the error to <code>stdout</code>.</p>
<pre><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&apos;http&apos;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&apos;error&apos;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  response<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&apos;error&apos;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">&apos;GET&apos;</span> <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">&apos;/echo&apos;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    request<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    response<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>We&apos;ve now covered most of the basics of handling HTTP requests. At this point,
you should be able to:</p>
<ul>
<li>Instantiate an HTTP server with a request handler function, and have it listen
on a port.</li>
<li>Get headers, URL, method and body data from <code>request</code> objects.</li>
<li>Make routing decisions based on URL and/or other data in <code>request</code> objects.</li>
<li>Send headers, HTTP status codes and body data via <code>response</code> objects.</li>
<li>Pipe data from <code>request</code> objects and to <code>response</code> objects.</li>
<li>Handle stream errors in both the <code>request</code> and <code>response</code> streams.</li>
</ul>
<p>From these basics, Node.js HTTP servers for many typical use cases can be
constructed. There are plenty of other things these APIs provide, so be sure to
read through the API docs for <a href="javascript:if(confirm(%27https://nodejs.org/api/events.html  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/events.html%27" tppabs="https://nodejs.org/api/events.html"><code>EventEmitters</code></a>, <a href="javascript:if(confirm(%27https://nodejs.org/api/stream.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/stream.html%27" tppabs="https://nodejs.org/api/stream.html"><code>Streams</code></a>, and <a href="javascript:if(confirm(%27https://nodejs.org/api/http.html  \n\nThis file was not retrieved by Teleport Ultra, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?%27))window.location=%27https://nodejs.org/api/http.html%27" tppabs="https://nodejs.org/api/http.html"><code>HTTP</code></a>.</p>

            </article>

        </div>
    </div>

    <a href="#" id="scrollToTop">&uarr; <span>Scroll to top</span></a>
    
    <footer  role="contentinfo">
    
        <div class="container">
            <div class="linuxfoundation-footer">
                <div class="issue-link-container">
                    <a class="linuxfoundation-logo" href="javascript:if(confirm(%27http://collabprojects.linuxfoundation.org/  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://collabprojects.linuxfoundation.org/%27" tppabs="http://collabprojects.linuxfoundation.org/">
                        <img alt="Linux Foundation Collaborative Projects" src="/static/images/lfcp.png">
                    </a>
                    <ul class="list-divider-pipe issue-link">
                        <li><a href="javascript:if(confirm(%27https://github.com/nodejs/node/issues  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27https://github.com/nodejs/node/issues%27" tppabs="https://github.com/nodejs/node/issues">Report Node.js issue</a></li>
                        <li><a href="javascript:if(confirm(%27https://github.com/nodejs/nodejs.org/issues  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27https://github.com/nodejs/nodejs.org/issues%27" tppabs="https://github.com/nodejs/nodejs.org/issues">Report website issue</a></li>
                        <li><a href="javascript:if(confirm(%27https://github.com/nodejs/help/issues  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27https://github.com/nodejs/help/issues%27" tppabs="https://github.com/nodejs/help/issues">Get Help</a></li>
                    </ul>
                </div>
    
                <p>© 2016 Node.js Foundation. All Rights Reserved. Portions of this site originally © 2016 Joyent. </p>
                <p>Node.js is a trademark of Joyent, Inc. and is used with its permission. Please review the <a href="/static/documents/trademark-policy.pdf">Trademark Guidelines of the Node.js Foundation</a>.</p>
                <p>Linux Foundation is a registered trademark of The Linux Foundation.</p>
                <p>Linux is a registered <a href="javascript:if(confirm(%27http://www.linuxfoundation.org/programs/legal/trademark  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://www.linuxfoundation.org/programs/legal/trademark%27" tppabs="http://www.linuxfoundation.org/programs/legal/trademark" title="Linux Mark Institute">trademark</a> of Linus Torvalds.</p>
                <p>
                   <a href="javascript:if(confirm(%27https://raw.githubusercontent.com/nodejs/node/master/LICENSE  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27https://raw.githubusercontent.com/nodejs/node/master/LICENSE%27" tppabs="https://raw.githubusercontent.com/nodejs/node/master/LICENSE">Node.js Project Licensing Information</a>.
                </p>
            </div>
        </div>
    
    </footer>
    
    <link rel="stylesheet" href="/static/css/prism-tomorrow.css" media="all">
    <script type="text/javascript">
        var $scrollToTop = document.getElementById('scrollToTop');
        (window.onscroll = function() {
            $scrollToTop.style.display = (window.pageYOffset > window.innerHeight) ? 'block' : 'none';
        })();
        $scrollToTop.onclick = function() {
            window.scrollTo(0, 0);
            return false;
        };
    </script>
    
    <script>
    (function(d,e,m,s){
        if (!/(MSIE|Trident)/.test(navigator.userAgent)){return;}
        m=d.createElement(e);
        s=d.getElementsByTagName(e)[0];m.async=1;m.src='/static/js/modernizr.custom.js';
        m.onload=function(){Modernizr.addTest('flexboxtweener', Modernizr.testAllProps('flexAlign'));};
        s.parentNode.insertBefore(m,s);
    })(document,'script');
    </script>
    
</body>
</html>
